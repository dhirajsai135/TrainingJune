----Getting data---------
public async Task<ActionResult> Index()
        {
            string BaseUrl = "http://localhost:41374/";
            var BlogInfo = new List<Blog>();
            //HttpClient cl = new HttpClient();
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri(BaseUrl);
                client.DefaultRequestHeaders.Clear();
                //Define request data format  
                client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                //Sending request to find web api REST service resource GetAllEmployees using HttpClient  
                HttpResponseMessage Res = await client.GetAsync("api/Blog");
                //Checking the response is successful or not which is sent using HttpClient  
                if (Res.IsSuccessStatusCode)
                {
                    //Storing the response details recieved from web api   
		    var BlogResponse = Res.Content.ReadAsStringAsync().Result;

                    //Deserializing the response recieved from web api and storing into the Employee list  
                    BlogInfo = JsonConvert.DeserializeObject<List<Blog>>(BlogResponse);

                }
                //returning the employee list to view  
                return View(BlogInfo);
            }

-------for adding the data-----------------
public async Task<ActionResult> Create(Blog B)
        {
           using (var httpClient = new HttpClient())
            {
                StringContent content = new StringContent(JsonConvert.SerializeObject(B), Encoding.UTF8, "application/json");

                using (var response = await httpClient.PostAsync("http://localhost:41374/api/Blogs", content))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    var obj = JsonConvert.DeserializeObject<Blog>(apiResponse);
                }
            }
            return RedirectToAction("Index");
        }

--------for getting particular id-------------
public async Task<ActionResult> Details(int id)
        {
            Blog B = new Blog();
            using (var httpClient = new HttpClient())
            {
                using (var response = await httpClient.GetAsync("http://localhost:41374/api/Blogs/" + id))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    B = JsonConvert.DeserializeObject<Blog>(apiResponse);
                }
            }
            return View(B);
        }

----------for delete a prticular id-------------
public async Task<ActionResult> Delete(int id)
        {
            TempData["BlogId"] = id;
            Blog B = new Blog();
            using (var httpClient = new HttpClient())
            {
                using (var response = await httpClient.GetAsync("http://localhost:41374/api/Blogs/" + id))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    B = JsonConvert.DeserializeObject<Blog>(apiResponse);
                }
            }
            return View(B);
        }

        public async Task<ActionResult> Delete(Blog B)
        {
            int Bid = Convert.ToInt32(TempData["BlogId"]);
            using (var httpClient = new HttpClient())
            {
                using (var response = await httpClient.DeleteAsync("http://localhost:41374/api/Blogs/" + Bid))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                }
            }
            return RedirectToAction("Index");
        }

-----------for updating a particular id-----------------
public async Task<ActionResult> Edit(int id)
        {
            TempData["BlogId"] = id;
            Blog B = new Blog();
            using (var httpClient = new HttpClient())
            {
                using (var response = await httpClient.GetAsync("http://localhost:41374/api/Blogs/" + id))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    B = JsonConvert.DeserializeObject<Blog>(apiResponse);
                }
            }
            return View(B);
        }

        public async Task<ActionResult> Edit(Blog B)
        {
            int Bid = Convert.ToInt32(TempData["BlogId"]);
            Blog rec = new Blog();
            using (var httpClient = new HttpClient())
            {
                StringContent content = new StringContent(JsonConvert.SerializeObject(B), Encoding.UTF8, "application/json");

                using (var response = await httpClient.PutAsync("http://localhost:41374/api/Blogs/" + Bid,content))
                {
                    string apiResponse = await response.Content.ReadAsStringAsync();
                    rec = JsonConvert.DeserializeObject<Blog>(apiResponse);
                }
            }
            return RedirectToAction("Index");
        }